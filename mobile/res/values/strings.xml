<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">BOSS</string>
    <string name="menu_settings">Settings</string>
    <string name="main_title">BOSS</string>
    <string name="loc_label">Localization</string>
    <string name="about_label">About</string>
    <string name="exit_label">Exit</string>
    <string name="map_desc">Map</string>
    <string name="loc_title">Localization</string>
    <string name="about_title">About BOSS</string>
    <string name="about_text">Commercial buildings are attractive targets for introducing innovative cyber-physical control systems, because they are already highly instrumented distributed systems which consume large quantities of energy. However, they are not currently programmable in a meaningful sense because each building is constructed with vertically integrated, closed subsystems and without uniform abstractions to write applications against. We develop a set of operating system services called BOSS, which supports multiple portable, fault-tolerant applications on top of the distributed physical resources present in large commercial buildings. We evaluate our system based on lessons learned from deployments of many novel applications in our test building, a four-year-old, 140,000sf building with modern digital controls, as well as partial deployments at other sites.\n <b>Public Summary: </b>\n by Richard Mortier\n
This paper presents BOSS, a set of operating system services on which to build applications for managing large commercial buildings. Existing commercial building management systems aboundâ€”BOSS takes a systems view on the problem, proposing, implementing and evaluating an architecture for development of robust, portable applications. It is an integration paper that describes a system consisting of a set of services and APIs that abstract the hardware layer of commercial building sensors and actuators, so we can write portable building monitoring and control applications.\n
The paper describes three key components: (i) an approximate query language that lets applications specify components in terms of relationship to other components, rather than specifying devices specifically; (ii) a transactional system for updating state of multiple physical devices, and reasoning about failure cases; and (iii) a time series service that allows analytics (historical data) and control (real-time data) to be treated uniformly. The implementation is validated through deployment in a 140,000 sq. ft. commercial building.\n
This paper generated considerable discussion in the TPC meeting, as is often the case with any paper that tries to bring a new topic to the fore in a community. Concerns were voiced about the relevance of the topic and the novelty in comparison to existing commercialsystems. These were countered by the interest in a new (for NSDI) problem domain, and the architectural, integrative nature of the work.\n
On balance, the novelty of the problem domain, and the desire to see more work in this area won out: the paper it brings to our attention a problem domain that seems ripe for further work. The practical evaluation, using a 4 year-old 140,000 sq. ft. building, coupled with the architectural (pun intended!) description of the system and its features seems a good fit to this community. Finally, the authors also publicly release the code for several components of BOSS: we hope that this combination of released tools and a new problem domain will spark future work in this interesting and, in many ways, under-considered area.\n
For more information, please visit <a href="http://sdb.cs.berkeley.edu/">http://sdb.cs.berkeley.edu/</a>,\n or contact <a href="mailto:kaifei@berkeley.edu">kaifei@Berkeley.EDU</a>\n\n</string>

</resources>